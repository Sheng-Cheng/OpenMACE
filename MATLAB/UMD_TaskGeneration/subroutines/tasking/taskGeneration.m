function [wpts, swarmWorld] = taskGeneration(swarmWorld, swarmModel, trueWorld)
switch swarmModel.taskGeneration
    case 'lawnmower'
        wpts = [];        
    case 'randomWpts'
        wpts = []; 
    case 'mutualInfoWpts' 
        swarmWorld.samplingPriority = swarmWorld.mutualInfoSurface;
        temp = tic;
        if ( ~isfield(swarmWorld,'cellCenterOfMass') )        
        % compute voronoi partition for the first time
        disp('running for first time / VP');
        [swarmWorld.voronoiVertices, swarmWorld.voronoiCells, swarmWorld.cellMass, swarmWorld.cellCenterOfMass] = ...
            approxEqualMassVornoiPartition(trueWorld.xx, trueWorld.yy, ...
                swarmWorld.samplingPriority, ...
                swarmModel.numTasks, ...
                swarmModel.stepSizeGain, ...
                swarmModel.percentTol, ...
                swarmModel.maxIters);
        else
        disp('running recursive / VP');            
            % compute voronoi partition iteration (extra argument)
            [swarmWorld.voronoiVertices, swarmWorld.voronoiCells, swarmWorld.cellMass, swarmWorld.cellCenterOfMass] = ...
                approxEqualMassVornoiPartition(trueWorld.xx, trueWorld.yy, ...
                swarmWorld.samplingPriority , ...                 %swarmWorld.mutualInfoSurface, ...
                swarmModel.numTasks, ...
                swarmModel.stepSizeGain, ...
                swarmModel.percentTol, ...
                swarmModel.maxIters, swarmWorld.cellCenterOfMass);               
        end     
        timeStamp = toc(temp);
        fprintf('approxEqualMaxxVoronoiPartition took %3.3f s\n',timeStamp);
        
        wpts = swarmWorld.cellCenterOfMass;
    end
end
